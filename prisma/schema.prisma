generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts     Account[]
  sessions     Session[]
  todos        Todo[]
  transactions Transaction[]
  bankAccounts BankAccount[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String   @db.String
  token      String   @db.String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Todo {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("todo")
}

model Transaction {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  amount      Float
  type        TransactionType
  category    String
  date        DateTime        @default(now())

  bankAccount   BankAccount? @relation(fields: [bankAccountId], references: [id])
  bankAccountId String?      @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("transactions")
}

model BankAccount {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  institution String
  balance     Float
  type        AccountType
  currency    String      @default("USD")
  color       String      @default("#0ea5e9")

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bank_accounts")
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum AccountType {
  BANK
  INVESTMENT
  WALLET
}
